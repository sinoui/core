// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`正确渲染填充模式的input 1`] = `[Function]`;

exports[`渲染不可用状态下的填充模式的Input 1`] = `[Function]`;

exports[`渲染密集状态下填充模式的Input 1`] = `
.c0 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  position: relative;
  box-sizing: border-box;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  cursor: text;
  color: rgba(0,0,0,0.87);
  font-size: 1rem;
  -webkit-letter-spacing: 0.00938em;
  -moz-letter-spacing: 0.00938em;
  -ms-letter-spacing: 0.00938em;
  letter-spacing: 0.00938em;
  font-family: -apple-system,BlinkMacSystemFont,'Segoe UI','PingFang SC','Hiragino Sans GB','Microsoft YaHei',Roboto,'Noto Sans SC','Helvetica Neue',Helvetica,Arial,sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol';
  line-height: 1.1875em;
}

.c0 > input,
.c0 > textarea {
  padding: 6px 0 7px;
  display: block;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  line-height: inherit;
  font: inherit;
  color: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  border: none;
  box-sizing: content-box;
  background: none;
  margin: 0px;
  -webkit-tap-highlight-color: transparent;
  min-width: 0px;
  width: 100%;
  height: 1.1876em;
  min-height: 1.1876em;
}

.c0 > input::-moz-placeholder,
.c0 > textarea::-moz-placeholder {
  color: rgba(0,0,0,0.38);
}

.c0 > input::-webkit-input-placeholder,
.c0 > textarea::-webkit-input-placeholder {
  color: rgba(0,0,0,0.38);
}

.c0 > input:-ms-input-placeholder,
.c0 > textarea:-ms-input-placeholder {
  color: rgba(0,0,0,0.38);
}

.c0 > input::-ms-clear,
.c0 > textarea::-ms-clear {
  display: none;
}

.c0 > input:focus,
.c0 > textarea:focus {
  outline: 0;
}

.c0 > input:invalid,
.c0 > textarea:invalid {
  box-shadow: none;
}

.c0 > textarea {
  resize: none;
  overflow: hidden;
}

.c1 {
  position: relative;
  overflow: hidden;
  background-color: #f5f5f5;
  border-top-left-radius: 4px;
  border-top-right-radius: 4px;
  -webkit-transition: background-color 200ms cubic-bezier(0.0,0.0,0.2,1) 0ms;
  transition: background-color 200ms cubic-bezier(0.0,0.0,0.2,1) 0ms;
}

.c1 > .sinoui-input-adornment--end {
  margin-right: 12px;
  margin-left: -6px;
}

.c1 > .sinoui-input-adornment--start {
  margin-left: 10px;
  margin-right: 0px;
  margin-top: 12px;
}

.c1 > .sinoui-input-adornment--start ~ input {
  margin-left: -8px;
}

.c1 > input,
.c1 > textarea {
  padding: 26px 12px 11px;
  padding-top: 26px;
  padding-top: 22px;
  padding-bottom: 7px;
}

.c1::before {
  background-color: rgba(0,0,0,0.42);
  left: 0;
  bottom: 0;
  content: '';
  display: block;
  height: 1px;
  position: absolute;
  right: 0;
  -webkit-transition: background-color 200ms cubic-bezier(0.4,0.0,0.2,1) 0ms;
  transition: background-color 200ms cubic-bezier(0.4,0.0,0.2,1) 0ms;
  pointer-events: none;
  -webkit-transform: scaleX(1) scaleY(1);
  -ms-transform: scaleX(1) scaleY(1);
  transform: scaleX(1) scaleY(1);
}

.c1:hover::before {
  background-color: rgba(0,0,0,0.87);
}

.c1::after {
  background-color: #3f51b5;
  left: 0;
  bottom: 0;
  content: '';
  height: 2px;
  position: absolute;
  right: 0;
  -webkit-transition: -webkit-transform 200ms cubic-bezier(0.0,0.0,0.2,1) 0ms;
  -webkit-transition: transform 200ms cubic-bezier(0.0,0.0,0.2,1) 0ms;
  transition: transform 200ms cubic-bezier(0.0,0.0,0.2,1) 0ms;
  pointer-events: none;
  -webkit-transform: scaleX(0) scaleY(0);
  -ms-transform: scaleX(0) scaleY(0);
  transform: scaleX(0) scaleY(0);
}

.c1::before,
.c1::after {
  position: absolute;
  bottom: 0px;
  overflow: hidden;
  font-size: 0px;
}

.c1:hover::before {
  background-color: rgba(0,0,0,0.87);
  height: 1px;
}

.c1 > .sinoui-input__overlay {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0%;
  left: 0%;
  background-color: rgba(0,0,0,0.87);
  pointer-events: none;
  z-index: 2;
  -webkit-transition: background-color 150ms cubic-bezier(0.4,0.0,0.2,1) 0ms;
  transition: background-color 150ms cubic-bezier(0.4,0.0,0.2,1) 0ms;
  opacity: 0;
}

.c1:hover > .sinoui-input__overlay {
  opacity: 0.04;
}

<div
  className="c0 c1 sinoui-base-input"
  data-testid="baseInput"
  onClick={[Function]}
>
  <input
    className="sinoui-base-input__input"
    onBlur={[Function]}
    onChange={[Function]}
    onFocus={[Function]}
  />
  <div
    className="sinoui-input__overlay"
  />
</div>
`;

exports[`渲染错误状态下填充模式的Input 1`] = `[Function]`;
